// Xcode settings for all SetDirection iOS targets

// Latest iOS SDK and lowest supported iOS

SDKROOT = iphoneos
IPHONEOS_DEPLOYMENT_TARGET = 7.0

ARCHS = armv7 armv7s arm64

// Build with clang ("Apple LLVM compiler")

GCC_VERSION = com.apple.compilers.llvm.clang.1_0

// C language settings

GCC_C_LANGUAGE_STANDARD = gnu99
CLANG_CXX_LANGUAGE_STANDARD = c++11
GCC_ENABLE_OBJC_EXCEPTIONS = YES

// "For backwards compatibility reasons, this setting is enabled by default, but disabling it is strongly recommended."

ALWAYS_SEARCH_USER_PATHS = NO

// Enable Modules
CLANG_ENABLE_MODULES = YES
CLANG_MODULES_AUTOLINK = YES

// Warnings

GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
GCC_WARN_64_TO_32_BIT_CONVERSION = YES
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES
CLANG_WARN_IMPLICIT_SIGN_CONVERSION = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_MISSING_PARENTHESES = YES
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES
GCC_WARN_ABOUT_MISSING_NEWLINE = NO
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES
GCC_WARN_SIGN_COMPARE = NO
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = NO
GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES
GCC_TREAT_WARNINGS_AS_ERRORS = YES
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES
GCC_WARN_UNDECLARED_SELECTOR = YES
GCC_WARN_UNKNOWN_PRAGMAS = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_VALUE = YES
GCC_WARN_UNUSED_VARIABLE = YES
GCC_WARN_UNUSED_PARAMETER = NO
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = YES
GCC_WARN_SHADOW = YES
GCC_WARN_CONSTANT_CONVERSION = YES
CLANG_WARN_ENUM_CONVERSION = YES
CLANG_WARN_INT_CONVERSION = YES
CLANG_WARN_BOOL_CONVERSION = YES

// Interface builder stuff
IBC_FLATTEN_NIBS = YES
IBC_ERRORS = YES
IBC_NOTICES = YES
IBC_WARNINGS = YES

// Static analyzer stuff
CLANG_ANALYZER_DEADCODE_DEADSTORES = YES
CLANG_ANALYZER_GCD = YES
CLANG_ANALYZER_MALLOC = YES
CLANG_ANALYZER_OBJC_ATSYNC = YES
CLANG_ANALYZER_OBJC_NSCFERROR = YES
CLANG_ANALYZER_OBJC_INCOMP_METHOD_TYPES = YES
CLANG_ANALYZER_OBJC_CFNUMBER = YES
CLANG_ANALYZER_OBJC_COLLECTIONS = YES
CLANG_ANALYZER_OBJC_UNUSED_IVARS = YES
CLANG_ANALYZER_OBJC_SELF_INIT = YES
CLANG_ANALYZER_OBJC_RETAIN_COUNT = YES
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_KEYCHAIN_API = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK = YES
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES
CLANG_WARN_UNREACHABLE_CODE = YES
ENABLE_STRICT_OBJC_MSGSEND = YES

// Don't strip binaries that are copied as part of the packaging process.
// They're generally signed during build, so we shouldn't modify them afterwards.
// (In fact the build system refuses to, so having this set to YES just causes a warning.)
// This is not supposed to affect the final binary (app) -- that's STRIP_INSTALLED_PRODUCT.

COPY_PHASE_STRIP = NO

// "Symbols Hidden By Default".  Needs to be consistent across all the projects,
// or we might get linker warnings like:
// 
//    "Direct access in -[ALSAreaOfInterest(Protocol) createProtocolRegard] to global weak symbol
//     __ZTVN3Avt6Screen14AreaOfInterestE means the weak symbol cannot be overridden at runtime.
//     This was likely caused by different translation units being compiled with different visibility settings."
//
// Also see https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/CppRuntimeEnv/Articles/SymbolVisibility.html
// It doesn't seem to matter what value we choose, since we aren't using dylibs.

GCC_SYMBOLS_PRIVATE_EXTERN = YES
